#define MOD 10000//压位 
#define BIT 4
#define SZ 10000
struct Bign{
    int a[SZ],len;
    Bign(){memset(a,0,sizeof(a));len=0;}
    inline void set0(){
        memset(a,0,sizeof(a));
        len=1;
    }
    inline Bign operator = (int num){   //赋值为int 
        len=0;
        for(;num;num/=MOD)
            a[len++]=num%MOD;
    }
    inline bool operator < (const Bign &b)const{//小于 
        if(len!=b.len)return len<b.len;
        for(int i(len-1);i>=0;i--)
            if(a[i]!=b.a[i])
                return a[i]<b.a[i];
        return 0;
    }
    inline bool operator > (const Bign &b)const{ 
        return (*this)>b;
    }
    inline bool operator == (const Bign &b)const{//相等 
        return !(b<*this)&&!(*this<b);
    }
    inline Bign operator + (const Bign &b)const{//高精加 
        Bign c;
        c.set0();
        c.len=0;
        for(int i(0),g(0);g||i<max(len,b.len);i++){
            int x(g);
            if(i<len)x+=a[i];
            if(i<b.len)x+=b.a[i];
            c.a[c.len++]=x%MOD;
            g=x/MOD; 
        }
        return c;
    }
    inline Bign operator * (const Bign &b)const{//高精乘 
        Bign c;
        c.len=len+b.len-1;
        if ((b.len==1&&!b.a[0])||(len==1&&!a[0])){
            c.len=1;
            return c;
        }
        for (int i=0;i<len;i++)
            for (int j=0;j<b.len;j++){
                c.a[i+j]+=a[i]*b.a[j];
                c.a[i+j+1]+=c.a[i+j]/MOD;
                c.a[i+j]%=MOD;
            }
        if (c.a[c.len]) c.len++;
        return c;
    }
    inline Bign operator / (int x)//除以单精 
    {
        Bign c;
        c.len = len;
        for (int i(len-1),g(0); i>=0; i--)
        {
           (g*=MOD)+=a[i];
            c.a[i] =g/x;
            g=g%x;
        }
        while (c.len>0&&!c.a[c.len-1])c.len--;
        return c;
    }
    inline void print(){//输出 
        printf("%d",a[len-1]);
        for(int i(len-2);i>=0;i--)
            printf("%.4d",a[i]);
        puts("");
    }
};
